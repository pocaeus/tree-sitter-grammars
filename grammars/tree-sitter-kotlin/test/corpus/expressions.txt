================================================================================
Multiplication expression
================================================================================

45 * 3

--------------------------------------------------------------------------------

(source_file
  (multiplicative_expression
    (integer_literal)
    (integer_literal)))

================================================================================
Safe Navigation
================================================================================

a?.bar()
a? .bar()
a? . bar()
a?
  .bar()
a ? . bar()

--------------------------------------------------------------------------------

(source_file
  (call_expression
    (navigation_expression
      (simple_identifier)
      (navigation_suffix
        (simple_identifier)))
    (call_suffix
      (value_arguments)))
  (call_expression
    (navigation_expression
      (simple_identifier)
      (navigation_suffix
        (simple_identifier)))
    (call_suffix
      (value_arguments)))
  (call_expression
    (navigation_expression
      (simple_identifier)
      (navigation_suffix
        (simple_identifier)))
    (call_suffix
      (value_arguments)))
  (call_expression
    (navigation_expression
      (simple_identifier)
      (navigation_suffix
        (simple_identifier)))
    (call_suffix
      (value_arguments)))
  (call_expression
    (navigation_expression
      (simple_identifier)
      (navigation_suffix
        (simple_identifier)))
    (call_suffix
      (value_arguments))))

================================================================================
Function calls
================================================================================

print("Hello World!")
sum(1, 2)

--------------------------------------------------------------------------------

(source_file
  (call_expression
    (simple_identifier)
    (call_suffix
      (value_arguments
        (value_argument
          (string_literal)))))
  (call_expression
    (simple_identifier)
    (call_suffix
      (value_arguments
        (value_argument
          (integer_literal))
        (value_argument
          (integer_literal))))))

================================================================================
When expression
================================================================================

val x = 1
val y = when(x){
        1 -> true
        2 -> false
    }

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (integer_literal))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (when_expression
      subject: (when_subject
        (simple_identifier))
      entry: (when_entry
        condition: (when_condition
          (integer_literal))
        body: (control_structure_body
          (boolean_literal)))
      entry: (when_entry
        condition: (when_condition
          (integer_literal))
        body: (control_structure_body
          (boolean_literal))))))

================================================================================
When expression with type arguments
================================================================================

when (this) {
    is DispatchedCoroutine<*> -> return null
}

--------------------------------------------------------------------------------

(source_file
  (when_expression
    subject: (when_subject
      (this_expression))
    entry: (when_entry
      condition: (when_condition
        (type_test
          (user_type
            (type_identifier)
            (type_arguments
              (type_projection)))))
      body: (control_structure_body
        (jump_expression)))))

================================================================================
Value declaration with receiver type
================================================================================

val MyDate.s: String get() = "hello"

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    receiver: (user_type
      (type_identifier))
    variable: (variable_declaration
      (simple_identifier)
      (user_type
        (type_identifier)))
    getter: (getter
      (function_body
        (string_literal)))))

================================================================================
Expect as an expression
================================================================================

val x = expect(1)

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (call_expression
      (simple_identifier)
      (call_suffix
        (value_arguments
          (value_argument
            (integer_literal)))))))

================================================================================
Expect as a top-level expression
================================================================================

expect(1)

--------------------------------------------------------------------------------

(source_file
  (call_expression
    (simple_identifier)
    (call_suffix
      (value_arguments
        (value_argument
          (integer_literal))))))

================================================================================
Expect as a platform modifier
================================================================================

expect fun randomUUID(): String

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    modifiers: (modifiers
      (platform_modifier))
    name: (simple_identifier)
    parameters: (function_value_parameters)
    return_type: (user_type
      (type_identifier))))

================================================================================
Less than for generics
================================================================================

foo<Int>(1,2)
foo<Int>(1)

--------------------------------------------------------------------------------

(source_file
  (call_expression
    (simple_identifier)
    (call_suffix
      (type_arguments
        (type_projection
          (user_type
            (type_identifier))))
      (value_arguments
        (value_argument
          (integer_literal))
        (value_argument
          (integer_literal)))))
  (call_expression
    (simple_identifier)
    (call_suffix
      (type_arguments
        (type_projection
          (user_type
            (type_identifier))))
      (value_arguments
        (value_argument
          (integer_literal))))))

================================================================================
Less than for comparison
================================================================================

val x = a<b
val y = a>b
val z = a<b>c
// this is parsed as a generic, but could also be parsed as a comparison
val w = a<b>(c)
val a = a<2>(3)

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (comparison_expression
      (simple_identifier)
      (simple_identifier)))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (comparison_expression
      (simple_identifier)
      (simple_identifier)))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (comparison_expression
      (comparison_expression
        (simple_identifier)
        (simple_identifier))
      (simple_identifier)))
  (line_comment)
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (call_expression
      (simple_identifier)
      (call_suffix
        (type_arguments
          (type_projection
            (user_type
              (type_identifier))))
        (value_arguments
          (value_argument
            (simple_identifier))))))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (comparison_expression
      (comparison_expression
        (simple_identifier)
        (integer_literal))
      (parenthesized_expression
        (integer_literal)))))

================================================================================
Lambda Expressions
================================================================================

foo.forEach { (index, value) -> 2 }

--------------------------------------------------------------------------------

(source_file
  (call_expression
    (navigation_expression
      (simple_identifier)
      (navigation_suffix
        (simple_identifier)))
    (call_suffix
      (annotated_lambda
        (lambda_literal
          parameters: (lambda_parameters
            (multi_variable_declaration
              (variable_declaration
                (simple_identifier))
              (variable_declaration
                (simple_identifier))))
          body: (statements
            (integer_literal)))))))

================================================================================
Multiple Statements on a Single Line
================================================================================

fun main() { val temp = b.y; b.y = b.z; b.z = temp }

when (dir) {
  1 -> { val temp = b.y; b.y = b.z; b.z = temp }
}
--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (simple_identifier)
    parameters: (function_value_parameters)
    body: (function_body
      (statements
        (property_declaration
          variable: (variable_declaration
            (simple_identifier))
          expression: (navigation_expression
            (simple_identifier)
            (navigation_suffix
              (simple_identifier))))
        (assignment
          (directly_assignable_expression
            (simple_identifier)
            (navigation_suffix
              (simple_identifier)))
          (navigation_expression
            (simple_identifier)
            (navigation_suffix
              (simple_identifier))))
        (assignment
          (directly_assignable_expression
            (simple_identifier)
            (navigation_suffix
              (simple_identifier)))
          (simple_identifier)))))
  (when_expression
    subject: (when_subject
      (simple_identifier))
    entry: (when_entry
      condition: (when_condition
        (integer_literal))
      body: (control_structure_body
        (statements
          (property_declaration
            variable: (variable_declaration
              (simple_identifier))
            expression: (navigation_expression
              (simple_identifier)
              (navigation_suffix
                (simple_identifier))))
          (assignment
            (directly_assignable_expression
              (simple_identifier)
              (navigation_suffix
                (simple_identifier)))
            (navigation_expression
              (simple_identifier)
              (navigation_suffix
                (simple_identifier))))
          (assignment
            (directly_assignable_expression
              (simple_identifier)
              (navigation_suffix
                (simple_identifier)))
            (simple_identifier)))))))

================================================================================
Comments in Strings
================================================================================

val comments = foo("//")
val comments = foo("hello //")
val comments = foo("// there")
val comments = foo("hello // there")
val comments = """ 
  // hey there's a
  
  /* comment or two here */
"""
val comments = """ // and here """ 

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (call_expression
      (simple_identifier)
      (call_suffix
        (value_arguments
          (value_argument
            (string_literal))))))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (call_expression
      (simple_identifier)
      (call_suffix
        (value_arguments
          (value_argument
            (string_literal))))))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (call_expression
      (simple_identifier)
      (call_suffix
        (value_arguments
          (value_argument
            (string_literal))))))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (call_expression
      (simple_identifier)
      (call_suffix
        (value_arguments
          (value_argument
            (string_literal))))))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (string_literal))
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (string_literal)))

================================================================================
Qualified this/super expressions
================================================================================

class Square() : Rectangle(), Polygon {
    override fun draw() {
        this@Square.draw()
        super@Square.draw()
        super<Polygon>.draw()
        super<Rectangle>@Square.draw()
    }
}

--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (type_identifier)
    primary_constructor: (primary_constructor)
    delegation_specifiers: (delegation_specifier
      (constructor_invocation
        (user_type
          (type_identifier))
        (value_arguments)))
    delegation_specifiers: (delegation_specifier
      (user_type
        (type_identifier)))
    body: (class_body
      (function_declaration
        modifiers: (modifiers
          (member_modifier))
        name: (simple_identifier)
        parameters: (function_value_parameters)
        body: (function_body
          (statements
            (call_expression
              (navigation_expression
                (this_expression
                  (type_identifier))
                (navigation_suffix
                  (simple_identifier)))
              (call_suffix
                (value_arguments)))
            (call_expression
              (navigation_expression
                (super_expression
                  (type_identifier))
                (navigation_suffix
                  (simple_identifier)))
              (call_suffix
                (value_arguments)))
            (call_expression
              (navigation_expression
                (super_expression
                  (user_type
                    (type_identifier)))
                (navigation_suffix
                  (simple_identifier)))
              (call_suffix
                (value_arguments)))
            (call_expression
              (navigation_expression
                (super_expression
                  (user_type
                    (type_identifier))
                  (type_identifier))
                (navigation_suffix
                  (simple_identifier)))
              (call_suffix
                (value_arguments)))))))))

================================================================================
Try expression
================================================================================

val x = try {
    something()
  } catch (e: SomeException) {
    handle()
  } catch (e: SomeOtherException) {
    handle()
  } finally {
    something()
  }

--------------------------------------------------------------------------------

(source_file
  (property_declaration
    variable: (variable_declaration
      (simple_identifier))
    expression: (try_expression
      body: (statements
        (call_expression
          (simple_identifier)
          (call_suffix
            (value_arguments))))
      catch: (catch_block
        (simple_identifier)
        (user_type
          (type_identifier))
        body: (statements
          (call_expression
            (simple_identifier)
            (call_suffix
              (value_arguments)))))
      catch: (catch_block
        (simple_identifier)
        (user_type
          (type_identifier))
        body: (statements
          (call_expression
            (simple_identifier)
            (call_suffix
              (value_arguments)))))
      finally: (finally_block
        body: (statements
          (call_expression
            (simple_identifier)
            (call_suffix
              (value_arguments))))))))

